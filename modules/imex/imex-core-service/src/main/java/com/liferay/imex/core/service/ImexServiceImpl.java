package com.liferay.imex.core.service;

import com.liferay.imex.core.api.ImexService;
import com.liferay.imex.core.api.archiver.ImexArchiverService;
import com.liferay.imex.core.api.configuration.ImexConfigurationService;
import com.liferay.imex.core.api.configuration.model.ImexProperties;
import com.liferay.imex.core.api.identifier.ProcessIdentifierGenerator;
import com.liferay.imex.core.api.report.ImexExecutionReportService;
import com.liferay.imex.core.api.report.model.ImexOperationEnum;
import com.liferay.imex.core.service.configuration.model.ConfigurationOverrideProcessIdentifier;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.osgi.service.component.annotations.ReferenceCardinality;
import org.pmw.tinylog.LoggingContext;

@Component(
		immediate = true,
		service = ImexService.class
	)
public class ImexServiceImpl extends ImexServiceBaseImpl implements ImexService {
	
	private static final Log _log = LogFactoryUtil.getLog(ImexServiceImpl.class);

	@Reference(cardinality=ReferenceCardinality.MANDATORY)
	protected ImexArchiverService imexArchiverService;
	
	@Reference(cardinality=ReferenceCardinality.MANDATORY)
	protected ImexConfigurationService configurationService;
	
	@Reference(cardinality=ReferenceCardinality.MANDATORY)
	protected ImexExecutionReportService reportService;
	
	@Override
	public String generateOverrideFileSystemConfigurationFiles() {
		return generateOverrideFileSystemConfigurationFiles(null, true);
	}
	
	@Override
	public String generateOverrideFileSystemConfigurationFiles(List<String> bundleNames, boolean archive) {
		
		Map<String,Properties> props = configurationService.loadAllConfigurationMap(bundleNames);
		
		ProcessIdentifierGenerator processIdentifier = new ConfigurationOverrideProcessIdentifier();
		
		String identifier = processIdentifier.generateUniqueIdentifier();
		LoggingContext.put(ImexExecutionReportService.IDENTIFIER_KEY, identifier);
		
		reportService.getStartMessage(_log, "CFG_OVERRIDE process");
				
		//Initialisation r√©pertoire de configuration
		initializeConfigurationtDirectory();
		
		if (props != null) {
			
			if (archive) {
				
				ImexProperties coreConfig = new ImexProperties();
				configurationService.loadCoreConfiguration(coreConfig);
				imexArchiverService.archiveCfg(coreConfig.getProperties(), processIdentifier);
				
			}
			
			for (Map.Entry<String ,Properties> entry  : props.entrySet()) {
				
				Properties properties = entry.getValue();
				
				if (properties!= null && !properties.isEmpty()) {
					
					File propsFile = configurationService.getConfigurationOverrideFileName(entry);
					
					if (propsFile == null || (propsFile != null && !propsFile.exists())) {
						
						FileOutputStream stream = null;
						try {
							
							try {
								stream = new FileOutputStream(propsFile);
								
								String text = "\n IMPORTANT : ";
								text +="\n  - To reload this configuration don't forget to perform : stop <bundleId> and start <bundleId>";
								text +="\n  - To find corresponding bundeId use : lb | grep " + propsFile.getName();
								text +="\n";
								text +="\n This file was generated by IMEX";
								text +="\n";
								
								properties.store(stream, text);
								reportService.getOK(_log, entry.getKey(), propsFile.getName(), propsFile, ImexOperationEnum.CREATE);
							} finally {
						        if (stream != null) stream.close();
						    }
							
						} catch (IOException e) {
							 _log.error(e,e);
					    }
						
					} else {
						reportService.getMessage(_log, "Keeping existing file [" +  propsFile.getAbsolutePath() + "]");
					}
					
				} else {
					reportService.getEmpty(_log, entry.getKey());
				}	
			
			}
			
		}
		
		reportService.getEndMessage(_log, "CFG_OVERRIDE process");
		
		return identifier;
		
	}
	
	private File initializeConfigurationtDirectory() {
		
		String cfgFilePath = configurationService.getImexCfgOverridePath();
		
		File cfgFile = new File(cfgFilePath);
		
		cfgFile.mkdirs();
		if (!cfgFile.exists()) {
			_log.error("Failed to create directory " + cfgFile);
		}
		
		return cfgFile;
			
	}

}
